services:

  mongo:
    image: "mongo:4.4"
    volumes:
      - "/data/${PROJECT}/mongo:/data/db"
    ports:
      - "${MONGO_HOST_PORT}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    restart: unless-stopped

  postgis:
    image: "postgis/postgis:15-3.3"
    labels:
      com.datadoghq.ad.logs: '[{"source":"postgresql","service":"postgresql"}]'
    volumes:
      - "/data/${PROJECT}/postgis:/var/lib/postgresql/data"
    ports:
      - "${POSTGIS_HOST_PORT}:5432"
    environment:
      POSTGRES_DB: liane
      POSTGRES_USER: ${MONGO_USERNAME}
      POSTGRES_PASSWORD: ${MONGO_PASSWORD}
    restart: unless-stopped

  backup:
    image: docker.io/tiredofit/db-backup
    depends_on:
      - mongo
    volumes:
      - "/data/${PROJECT}:/backup"
    environment:
      # - DEBUG_MODE=TRUE
      - DEFAULT_BACKUP_INTERVAL=720 # backup 12 hours 12 * 60
      - DEFAULT_CLEANUP_TIME=1      # clean backups that are older than 1 minute
      - DEFAULT_CHECKSUM=SHA1
      - DEFAULT_COMPRESSION=GZ
      - DB01_TYPE=pgsql
      - DB01_HOST=postgis
      - DB01_NAME=liane
      - DB01_USER=${MONGO_USERNAME}
      - DB01_PASS=${MONGO_PASSWORD}
      - DB01_EXTRA_BACKUP_OPTS=--clean
      - DB02_TYPE=mongo
      - DB02_HOST=mongo
      - DB02_USER=${MONGO_USERNAME}
      - DB02_PASS=${MONGO_PASSWORD}
    restart: unless-stopped
    networks:
      - default

  martin:
    image: ghcr.io/maplibre/martin
    command: [ "--config", "/config.yaml" ]
    volumes:
      - "./martin/config.yaml:/config.yaml:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gateway"
      - "traefik.http.routers.${PROJECT}-martin.rule=Host(`${DOMAIN}`) && (PathPrefix(`/liane_display`) || PathPrefix(`/rallying_point_display`))"
      - "traefik.http.routers.${PROJECT}-martin.entrypoints=web"
      - "traefik.http.routers.${PROJECT}-martin.middlewares=redirect@file"
      - "traefik.http.routers.${PROJECT}-martin-secure.rule=Host(`${DOMAIN}`) && (PathPrefix(`/liane_display`) || PathPrefix(`/rallying_point_display`))"
      - "traefik.http.routers.${PROJECT}-martin-secure.entrypoints=web-secure"
      - "traefik.http.routers.${PROJECT}-martin-secure.middlewares=compress@file"
      - "traefik.http.routers.${PROJECT}-martin-secure.tls.certResolver=gjinico"
      - "traefik.http.services.${PROJECT}-martin.loadbalancer.server.port=3000"
    environment:
      DB_USER: ${MONGO_USERNAME}
      DB_PASSWORD: ${MONGO_PASSWORD}
    depends_on:
      back:
        condition: service_healthy
    networks:
      - gateway
      - default
    restart: unless-stopped

  back:
    build: ../back
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gateway"
      - "traefik.http.routers.${PROJECT}-back.rule=Host(`${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/swagger`))"
      - "traefik.http.routers.${PROJECT}-back.entrypoints=web"
      - "traefik.http.routers.${PROJECT}-back.middlewares=redirect@file"
      - "traefik.http.routers.${PROJECT}-back-secure.rule=Host(`${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/swagger`))"
      - "traefik.http.routers.${PROJECT}-back-secure.entrypoints=web-secure"
      - "traefik.http.routers.${PROJECT}-back-secure.middlewares=compress@file"
      - "traefik.http.routers.${PROJECT}-back-secure.tls.certResolver=gjinico"
      - "traefik.http.services.${PROJECT}-back.loadbalancer.server.port=5000"
    depends_on:
      - mongo
      - postgis
    volumes:
      - "./service-account.json:/app/service-account.json:ro"
    environment:
      LIANE_Mongo__Username: ${MONGO_USERNAME}
      LIANE_Mongo__Password: ${MONGO_PASSWORD}
      LIANE_Database__Username: ${MONGO_USERNAME}
      LIANE_Database__Password: ${MONGO_PASSWORD}
      LIANE_Sms__ApiKey: ${SMS_API_KEY}
      LIANE_Auth__SecretKey: ${AUTH_SECRET_KEY}
      LIANE_Auth__TestAccount: ${AUTH_TEST_ACCOUNT}
      LIANE_Auth__TestCode: ${AUTH_TEST_CODE}
      LIANE_Auth__Cooldown: 30
      LIANE_Cloudflare__AccountId: ${CLOUDFLARE_ACCOUNT_ID}
      LIANE_Cloudflare__AccountHash: ${CLOUDFLARE_ACCOUNT_HASH}
      LIANE_Cloudflare__ApiKey: ${CLOUDFLARE_API_KEY}
      LIANE_Generator__IsEnabled: ${GENERATOR_IS_ENABLED}
      LIANE_Firebase__ServiceAccountFile: "/app/service-account.json"
    restart: unless-stopped
    networks:
      - gateway
      - osm
      - default

  web:
    build:
      context: ..
      args:
        DD_CLIENT_TOKEN: ""
        DD_APP_ID: ""
        APP_ENV: ${APP_ENV} 
        APP_VERSION: ${APP_VERSION}
        MAPTILER_KEY: ${MAPTILER_KEY}
        TEST_ACCOUNT: ${AUTH_TEST_ACCOUNT}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gateway"
      - "traefik.http.routers.${PROJECT}-web.rule=Host(`${DOMAIN}`) && PathPrefix(`/admin`)"
      - "traefik.http.routers.${PROJECT}-web.entrypoints=web"
      - "traefik.http.routers.${PROJECT}-web.middlewares=redirect@file"
      - "traefik.http.routers.${PROJECT}-web-secure.rule=Host(`${DOMAIN}`) && PathPrefix(`/admin`)"
      - "traefik.http.routers.${PROJECT}-web-secure.entrypoints=web-secure"
      - "traefik.http.routers.${PROJECT}-web-secure.middlewares=compress@file"
      - "traefik.http.routers.${PROJECT}-web-secure.tls.certResolver=gjinico"
      - "traefik.http.services.${PROJECT}-web.loadbalancer.server.port=3000"
    restart: unless-stopped
    networks:
      - gateway
      - default

networks:
  gateway:
    external: true
  osm:
    external: true
